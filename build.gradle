import org.gradle.internal.os.OperatingSystem

import java.time.Duration

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.2.0"
    // check dependency updates: ./gradlew dependencyUpdates -Drevision=release
    id 'com.github.ben-manes.versions' version '0.44.0'
    id 'com.github.hierynomus.license' version '0.16.1'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'io.perfana'
version = file("VERSION").readLines().first()
description = 'test-events-wiremock'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    implementation 'io.perfana:event-scheduler:3.1.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

license {
    // license check is broken on windows, skip
    if (OperatingSystem.current().isWindows()) ignoreFailures = true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Peter Paul Bakker, Perfana'

    header = file("src/main/resources/META-INF/LICENSE.txt")

    excludes(["**/*.txt", "src/main/resources/META-INF/services/**", "**/*.json"])

    // the standard java style makes intellij complain about dangling javadoc
    mapping {
        java = "SLASHSTAR_STYLE"
    }
    ignoreFailures = false
    strictCheck = true
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
// this only configures signing if the key is found
def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if(hasSigningKey) {
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.maven
    }
}

// customize the pom so it complies to Maven central requirements https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${project.group}:${project.name}"
            description = name
            url = "https://github.com/perfana/test-events-wiremock.git"
            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0"
                }
            }
            developers {
                developer {
                    id = 'peter.paul.bakker'
                    name = 'Peter Paul Bakker'
                    email = 'peter.paul@perfana.io'
                }
            }
            scm {
                connection = "scm:git:https://github.com/perfana/test-events-wiremock.git"
                developerConnection = "scm:git:git@github.com:perfana/test-events-wiremock.git"
                url = "https://github.com/perfana/test-events-wiremock.git"
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
    // Prevent "java.net.SocketTimeoutException: timeout", when Sonatype is slow.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

clean {
    println "clean mappings json files"
    delete(fileTree("${projectDir}/src/test/resources/mappings/") {
        include '*.json'
    })
}
